#ifdef __llvm__
#pragma GCC diagnostic ignored "-Wunused-private-field"
#endif
#include "TopDataPreparation/SampleXsection.h"
#include "TopDataPreparation/SampleXsectionSvc.h"
//
// File generated by /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc6-gcc4.7/bin/rootcint at Tue Sep 13 15:54:52 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIobjdITopDataPreparation_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TopDataPreparation_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SampleXsection SampleXsection;
      #else
      class SampleXsection  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::SampleXsection::showering showering;
         #else
         enum showering  {
         };
         #endif

         map< int, pair< double, double >  > m_Xsects; //
         map< int, pair< double, double >  > m_Uncert; //
         map< int, showering > m_Showering; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SampleXsectionSvc SampleXsectionSvc;
      #else
      class SampleXsectionSvc  {
         public:
         //friend XX;
         string m_inputFile; //
         ::SampleXsection* m_sampleXsection; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void SampleXsection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SampleXsection_Dictionary();
   static void *new_SampleXsection(void *p = 0);
   static void *newArray_SampleXsection(Long_t size, void *p);
   static void delete_SampleXsection(void *p);
   static void deleteArray_SampleXsection(void *p);
   static void destruct_SampleXsection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SampleXsection*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SampleXsection) == sizeof(::ROOT::Shadow::SampleXsection));
      ::SampleXsection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SampleXsection),0);
      static ::ROOT::TGenericClassInfo 
         instance("SampleXsection", "../TopDataPreparation/SampleXsection.h", 13,
                  typeid(::SampleXsection), DefineBehavior(ptr, ptr),
                  &SampleXsection_ShowMembers, &SampleXsection_Dictionary, isa_proxy, 4,
                  sizeof(::SampleXsection) );
      instance.SetNew(&new_SampleXsection);
      instance.SetNewArray(&newArray_SampleXsection);
      instance.SetDelete(&delete_SampleXsection);
      instance.SetDeleteArray(&deleteArray_SampleXsection);
      instance.SetDestructor(&destruct_SampleXsection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SampleXsection*)
   {
      return GenerateInitInstanceLocal((::SampleXsection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SampleXsection*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SampleXsection_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SampleXsection*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SampleXsectionSvc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SampleXsectionSvc_Dictionary();

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SampleXsectionSvc*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SampleXsectionSvc) == sizeof(::ROOT::Shadow::SampleXsectionSvc));
      ::SampleXsectionSvc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SampleXsectionSvc),0);
      static ::ROOT::TGenericClassInfo 
         instance("SampleXsectionSvc", "../TopDataPreparation/SampleXsectionSvc.h", 20,
                  typeid(::SampleXsectionSvc), DefineBehavior(ptr, ptr),
                  &SampleXsectionSvc_ShowMembers, &SampleXsectionSvc_Dictionary, isa_proxy, 4,
                  sizeof(::SampleXsectionSvc) );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SampleXsectionSvc*)
   {
      return GenerateInitInstanceLocal((::SampleXsectionSvc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SampleXsectionSvc*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SampleXsectionSvc_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SampleXsectionSvc*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void SampleXsection_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SampleXsection.
      typedef ::ROOT::Shadow::SampleXsection ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SampleXsection*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Xsects", (void*)&sobj->m_Xsects);
      R__insp.InspectMember("map<int,std::pair<double,double> >", (void*)&sobj->m_Xsects, "m_Xsects.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Uncert", (void*)&sobj->m_Uncert);
      R__insp.InspectMember("map<int,std::pair<double,double> >", (void*)&sobj->m_Uncert, "m_Uncert.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Showering", (void*)&sobj->m_Showering);
      R__insp.InspectMember("map<int,showering>", (void*)&sobj->m_Showering, "m_Showering.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SampleXsection(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SampleXsection : new ::SampleXsection;
   }
   static void *newArray_SampleXsection(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SampleXsection[nElements] : new ::SampleXsection[nElements];
   }
   // Wrapper around operator delete
   static void delete_SampleXsection(void *p) {
      delete ((::SampleXsection*)p);
   }
   static void deleteArray_SampleXsection(void *p) {
      delete [] ((::SampleXsection*)p);
   }
   static void destruct_SampleXsection(void *p) {
      typedef ::SampleXsection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SampleXsection

//______________________________________________________________________________
namespace ROOT {
   void SampleXsectionSvc_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SampleXsectionSvc.
      typedef ::ROOT::Shadow::SampleXsectionSvc ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SampleXsectionSvc*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_inputFile", (void*)&sobj->m_inputFile);
      R__insp.InspectMember("string", (void*)&sobj->m_inputFile, "m_inputFile.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_sampleXsection", &sobj->m_sampleXsection);
   }

}

namespace ROOT {
} // end of namespace ROOT for class ::SampleXsectionSvc

namespace ROOT {
   void maplEintcOSampleXsectioncLcLshoweringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOSampleXsectioncLcLshoweringgR_Dictionary();
   static void *new_maplEintcOSampleXsectioncLcLshoweringgR(void *p = 0);
   static void *newArray_maplEintcOSampleXsectioncLcLshoweringgR(Long_t size, void *p);
   static void delete_maplEintcOSampleXsectioncLcLshoweringgR(void *p);
   static void deleteArray_maplEintcOSampleXsectioncLcLshoweringgR(void *p);
   static void destruct_maplEintcOSampleXsectioncLcLshoweringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<int,SampleXsection::showering>*)
   {
      map<int,SampleXsection::showering> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,SampleXsection::showering>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,SampleXsection::showering>", -2, "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc6-gcc4.7/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<int,SampleXsection::showering>), DefineBehavior(ptr, ptr),
                  0, &maplEintcOSampleXsectioncLcLshoweringgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,SampleXsection::showering>) );
      instance.SetNew(&new_maplEintcOSampleXsectioncLcLshoweringgR);
      instance.SetNewArray(&newArray_maplEintcOSampleXsectioncLcLshoweringgR);
      instance.SetDelete(&delete_maplEintcOSampleXsectioncLcLshoweringgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOSampleXsectioncLcLshoweringgR);
      instance.SetDestructor(&destruct_maplEintcOSampleXsectioncLcLshoweringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<int,SampleXsection::showering> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,SampleXsection::showering>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOSampleXsectioncLcLshoweringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<int,SampleXsection::showering>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcOSampleXsectioncLcLshoweringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,SampleXsection::showering> : new map<int,SampleXsection::showering>;
   }
   static void *newArray_maplEintcOSampleXsectioncLcLshoweringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,SampleXsection::showering>[nElements] : new map<int,SampleXsection::showering>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOSampleXsectioncLcLshoweringgR(void *p) {
      delete ((map<int,SampleXsection::showering>*)p);
   }
   static void deleteArray_maplEintcOSampleXsectioncLcLshoweringgR(void *p) {
      delete [] ((map<int,SampleXsection::showering>*)p);
   }
   static void destruct_maplEintcOSampleXsectioncLcLshoweringgR(void *p) {
      typedef map<int,SampleXsection::showering> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<int,SampleXsection::showering>

namespace ROOT {
   void maplEintcOpairlEdoublecOdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOpairlEdoublecOdoublegRsPgR_Dictionary();
   static void *new_maplEintcOpairlEdoublecOdoublegRsPgR(void *p = 0);
   static void *newArray_maplEintcOpairlEdoublecOdoublegRsPgR(Long_t size, void *p);
   static void delete_maplEintcOpairlEdoublecOdoublegRsPgR(void *p);
   static void deleteArray_maplEintcOpairlEdoublecOdoublegRsPgR(void *p);
   static void destruct_maplEintcOpairlEdoublecOdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<int,pair<double,double> >*)
   {
      map<int,pair<double,double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,pair<double,double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,pair<double,double> >", -2, "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/root/5.34.19-x86_64-slc6-gcc4.7/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<int,pair<double,double> >), DefineBehavior(ptr, ptr),
                  0, &maplEintcOpairlEdoublecOdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,pair<double,double> >) );
      instance.SetNew(&new_maplEintcOpairlEdoublecOdoublegRsPgR);
      instance.SetNewArray(&newArray_maplEintcOpairlEdoublecOdoublegRsPgR);
      instance.SetDelete(&delete_maplEintcOpairlEdoublecOdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOpairlEdoublecOdoublegRsPgR);
      instance.SetDestructor(&destruct_maplEintcOpairlEdoublecOdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<int,pair<double,double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,pair<double,double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOpairlEdoublecOdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<int,pair<double,double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcOpairlEdoublecOdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,pair<double,double> > : new map<int,pair<double,double> >;
   }
   static void *newArray_maplEintcOpairlEdoublecOdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,pair<double,double> >[nElements] : new map<int,pair<double,double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOpairlEdoublecOdoublegRsPgR(void *p) {
      delete ((map<int,pair<double,double> >*)p);
   }
   static void deleteArray_maplEintcOpairlEdoublecOdoublegRsPgR(void *p) {
      delete [] ((map<int,pair<double,double> >*)p);
   }
   static void destruct_maplEintcOpairlEdoublecOdoublegRsPgR(void *p) {
      typedef map<int,pair<double,double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<int,pair<double,double> >

/********************************************************
* ../obj/TopDataPreparation_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTopDataPreparation_Dict();

extern "C" void G__set_cpp_environmentTopDataPreparation_Dict() {
  G__cpp_reset_tagtableTopDataPreparation_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevTopDataPreparation_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* SampleXsection */
static int G__TopDataPreparation_Dict_403_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleXsection* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleXsection[n];
     } else {
       p = new((void*) gvp) SampleXsection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleXsection;
     } else {
       p = new((void*) gvp) SampleXsection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleXsection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SampleXsection(*(SampleXsection*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SampleXsection(*(SampleXsection*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SampleXsection& obj = ((SampleXsection*) G__getstructoffset())->operator=(*(SampleXsection*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SampleXsection*) G__getstructoffset())->readFromFile((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleXsection*) G__getstructoffset())->setSample((const int) G__int(libp->para[0]), (const double) G__double(libp->para[1])
, (const double) G__double(libp->para[2]), (const SampleXsection::showering) G__int(libp->para[3])
, (const double) G__double(libp->para[4]), (const double) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SampleXsection*) G__getstructoffset())->getRawXsection((const int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SampleXsection*) G__getstructoffset())->getKfactor((const int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SampleXsection*) G__getstructoffset())->getXsection((const int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SampleXsection*) G__getstructoffset())->getXsectionUp((const int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SampleXsection*) G__getstructoffset())->getXsectionDown((const int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pair<double,double>* pobj;
         const pair<double,double> xobj = ((const SampleXsection*) G__getstructoffset())->getXsectionDownUp((const int) G__int(libp->para[0]));
         pobj = new pair<double,double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_403_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SampleXsection*) G__getstructoffset())->getShowering((const int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SampleXsection G__TSampleXsection;
static int G__TopDataPreparation_Dict_403_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SampleXsection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SampleXsection*) (soff+(sizeof(SampleXsection)*i)))->~G__TSampleXsection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SampleXsection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SampleXsection*) (soff))->~G__TSampleXsection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SampleXsectionSvc */
static int G__TopDataPreparation_Dict_419_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SampleXsectionSvc::svc(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_419_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SampleXsectionSvc::svc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TopDataPreparation_Dict_419_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SampleXsectionSvc*) G__getstructoffset())->sampleXsection());
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* SampleXsection */

/* SampleXsectionSvc */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTopDataPreparation_Dict {
 public:
  G__Sizep2memfuncTopDataPreparation_Dict(): p(&G__Sizep2memfuncTopDataPreparation_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTopDataPreparation_Dict::*p)();
};

size_t G__get_sizep2memfuncTopDataPreparation_Dict()
{
  G__Sizep2memfuncTopDataPreparation_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTopDataPreparation_Dict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTopDataPreparation_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,std::pair<double,double> >",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_maplEintcOpairlEdoublecOdoublegRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,pair<double,double> >",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_maplEintcOpairlEdoublecOdoublegRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,pair<double,double>,less<int> >",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_maplEintcOpairlEdoublecOdoublegRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,showering>",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_maplEintcOSampleXsectioncLcLshoweringcOlesslEintgRcOallocatorlEpairlEconstsPintcOSampleXsectioncLcLshoweringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,SampleXsection::showering>",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_maplEintcOSampleXsectioncLcLshoweringcOlesslEintgRcOallocatorlEpairlEconstsPintcOSampleXsectioncLcLshoweringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,SampleXsection::showering,less<int> >",117,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_maplEintcOSampleXsectioncLcLshoweringcOlesslEintgRcOallocatorlEpairlEconstsPintcOSampleXsectioncLcLshoweringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* SampleXsection */
static void G__setup_memvarSampleXsection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsection));
   { SampleXsection *p; p=(SampleXsection*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering),-1,-2,1,G__FastAllocString(4096).Format("pythia=%lldLL",(long long)SampleXsection::pythia).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering),-1,-2,1,G__FastAllocString(4096).Format("herwig=%lldLL",(long long)SampleXsection::herwig).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering),-1,-2,1,G__FastAllocString(4096).Format("sherpa=%lldLL",(long long)SampleXsection::sherpa).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering),-1,-2,1,G__FastAllocString(4096).Format("pythia8=%lldLL",(long long)SampleXsection::pythia8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering),-1,-2,1,G__FastAllocString(4096).Format("herwigpp=%lldLL",(long long)SampleXsection::herwigpp).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering),-1,-2,1,G__FastAllocString(4096).Format("unknown=%lldLL",(long long)SampleXsection::unknown).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_maplEintcOpairlEdoublecOdoublegRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEdoublecOdoublegRsPgRsPgRsPgR),G__defined_typename("map<int,std::pair<double,double> >"),-1,4,"m_Xsects=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_maplEintcOpairlEdoublecOdoublegRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEdoublecOdoublegRsPgRsPgRsPgR),G__defined_typename("map<int,std::pair<double,double> >"),-1,4,"m_Uncert=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_maplEintcOSampleXsectioncLcLshoweringcOlesslEintgRcOallocatorlEpairlEconstsPintcOSampleXsectioncLcLshoweringgRsPgRsPgR),G__defined_typename("map<int,showering>"),-1,4,"m_Showering=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SampleXsectionSvc */
static void G__setup_memvarSampleXsectionSvc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectionSvc));
   { SampleXsectionSvc *p; p=(SampleXsectionSvc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectionSvc),-1,-2,4,"s_instance=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_string),-1,-1,4,"m_inputFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsection),-1,-1,4,"m_sampleXsection=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTopDataPreparation_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSampleXsection(void) {
   /* SampleXsection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsection));
   G__memfunc_setup("SampleXsection",1455,G__TopDataPreparation_Dict_403_0_1, 105, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SampleXsection",1455,G__TopDataPreparation_Dict_403_0_2, 105, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsection), -1, 0, 1, 1, 1, 0, "u 'SampleXsection' - 11 - xs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TopDataPreparation_Dict_403_0_3, 117, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsection), -1, 1, 1, 1, 1, 0, "u 'SampleXsection' - 11 - xs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readFromFile",1200,G__TopDataPreparation_Dict_403_0_4, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSample",942,G__TopDataPreparation_Dict_403_0_5, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 10 - dsid d - - 10 - xSect "
"d - - 10 - kFact i 'SampleXsection::showering' - 10 - shower "
"d - - 10 - xSectDw d - - 10 - xSectUp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRawXsection",1463,G__TopDataPreparation_Dict_403_0_6, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 10 - dsid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKfactor",1034,G__TopDataPreparation_Dict_403_0_7, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 10 - dsid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXsection",1165,G__TopDataPreparation_Dict_403_0_8, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 10 - dsid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXsectionUp",1362,G__TopDataPreparation_Dict_403_0_9, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 10 - dsid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXsectionDown",1573,G__TopDataPreparation_Dict_403_0_10, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 10 - dsid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXsectionDownUp",1770,G__TopDataPreparation_Dict_403_0_11, 117, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_pairlEdoublecOdoublegR), -1, 0, 1, 1, 1, 8, "i - - 10 - dsid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowering",1270,G__TopDataPreparation_Dict_403_0_12, 105, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering), -1, 0, 1, 1, 1, 8, "i - - 10 - dsid", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SampleXsection", 1581, G__TopDataPreparation_Dict_403_0_13, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSampleXsectionSvc(void) {
   /* SampleXsectionSvc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectionSvc));
   G__memfunc_setup("svc",332,G__TopDataPreparation_Dict_419_0_1, 85, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectionSvc), -1, 0, 1, 3, 1, 0, "u 'string' - 0 - inputFile", (char*)NULL, (void*) G__func2void( (SampleXsectionSvc* (*)(string))(&SampleXsectionSvc::svc) ), 0);
   G__memfunc_setup("svc",332,G__TopDataPreparation_Dict_419_0_2, 85, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectionSvc), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (SampleXsectionSvc* (*)())(&SampleXsectionSvc::svc) ), 0);
   G__memfunc_setup("sampleXsection",1487,G__TopDataPreparation_Dict_419_0_3, 85, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsection), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SampleXsectionSvc",1755,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectionSvc), -1, 0, 1, 1, 4, 0, "u 'string' - 0 '\"\"' inputFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SampleXsectionSvc",1755,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectionSvc), -1, 0, 1, 1, 4, 0, "u 'SampleXsectionSvc' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TopDataPreparation_DictLN_SampleXsectionSvc), -1, 1, 1, 1, 4, 0, "u 'SampleXsectionSvc' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialize",1074,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTopDataPreparation_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTopDataPreparation_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTopDataPreparation_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TopDataPreparation_DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_SampleXsection = { "SampleXsection" , 99 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering = { "SampleXsection::showering" , 101 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_maplEintcOpairlEdoublecOdoublegRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEdoublecOdoublegRsPgRsPgRsPgR = { "map<int,pair<double,double>,less<int>,allocator<pair<const int,pair<double,double> > > >" , 99 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_maplEintcOSampleXsectioncLcLshoweringcOlesslEintgRcOallocatorlEpairlEconstsPintcOSampleXsectioncLcLshoweringgRsPgRsPgR = { "map<int,SampleXsection::showering,less<int>,allocator<pair<const int,SampleXsection::showering> > >" , 99 , -1 };
G__linked_taginfo G__TopDataPreparation_DictLN_SampleXsectionSvc = { "SampleXsectionSvc" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTopDataPreparation_Dict() {
  G__TopDataPreparation_DictLN_string.tagnum = -1 ;
  G__TopDataPreparation_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TopDataPreparation_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TopDataPreparation_DictLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__TopDataPreparation_DictLN_SampleXsection.tagnum = -1 ;
  G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering.tagnum = -1 ;
  G__TopDataPreparation_DictLN_maplEintcOpairlEdoublecOdoublegRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEdoublecOdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__TopDataPreparation_DictLN_maplEintcOSampleXsectioncLcLshoweringcOlesslEintgRcOallocatorlEpairlEconstsPintcOSampleXsectioncLcLshoweringgRsPgRsPgR.tagnum = -1 ;
  G__TopDataPreparation_DictLN_SampleXsectionSvc.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTopDataPreparation_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_string);
   G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_pairlEdoublecOdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_SampleXsection),sizeof(SampleXsection),-1,265984,(char*)NULL,G__setup_memvarSampleXsection,G__setup_memfuncSampleXsection);
   G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_SampleXsectioncLcLshowering);
   G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_maplEintcOpairlEdoublecOdoublegRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEdoublecOdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_maplEintcOSampleXsectioncLcLshoweringcOlesslEintgRcOallocatorlEpairlEconstsPintcOSampleXsectioncLcLshoweringgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TopDataPreparation_DictLN_SampleXsectionSvc),sizeof(SampleXsectionSvc),-1,265984,(char*)NULL,G__setup_memvarSampleXsectionSvc,G__setup_memfuncSampleXsectionSvc);
}
extern "C" void G__cpp_setupTopDataPreparation_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTopDataPreparation_Dict()");
  G__set_cpp_environmentTopDataPreparation_Dict();
  G__cpp_setup_tagtableTopDataPreparation_Dict();

  G__cpp_setup_inheritanceTopDataPreparation_Dict();

  G__cpp_setup_typetableTopDataPreparation_Dict();

  G__cpp_setup_memvarTopDataPreparation_Dict();

  G__cpp_setup_memfuncTopDataPreparation_Dict();
  G__cpp_setup_globalTopDataPreparation_Dict();
  G__cpp_setup_funcTopDataPreparation_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTopDataPreparation_Dict();
  return;
}
class G__cpp_setup_initTopDataPreparation_Dict {
  public:
    G__cpp_setup_initTopDataPreparation_Dict() { G__add_setup_func("TopDataPreparation_Dict",(G__incsetup)(&G__cpp_setupTopDataPreparation_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTopDataPreparation_Dict() { G__remove_setup_func("TopDataPreparation_Dict"); }
};
G__cpp_setup_initTopDataPreparation_Dict G__cpp_setup_initializerTopDataPreparation_Dict;


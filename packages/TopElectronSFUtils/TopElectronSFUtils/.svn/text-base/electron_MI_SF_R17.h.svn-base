#ifndef electron_MI_SF_R17_h
#define electron_MI_SF_R17_h

/****************************************************************************
 * electron_MI_SF_R17.h                                                     *
 *                                                                          *
 * Simple functions which return data/MC scale factors                      *
 * given a electron's eta 						    *
 * Also functions for corresponding uncertainties.                          *
 *                                                                          *
 * double ele_ID_SF(double et, double ET)                   	            *
 * double ele_ID_SF_err(double eta, double ET)               	      	    *
 * double ele_reco_SF(double eta);                                          *
 * double ele_reco_SF_err(double eta);                                      *
 * double ele_recoID_SF(double eta, double ET);             	            *
 * double ele_recoID_SF_err(double eta, double ET);          	      	    *
 * double ele_trigger_SF(double eta, double ET, int set);                   *
 * double ele_trigger_SF_err(double eta, double ET, int set);          	    *
 * double ele_ID_SF_AFII(double eta, double ET);                            *
 * double ele_ID_SF_err_AFII(double eta, double ET);                        *
 * double ele_reco_SF_AFII(double eta);                                     *
 * double ele_reco_SF_err_AFII(double eta);                                 *
 * double ele_recoID_SF_AFII(double eta, double ET);                        *
 * double ele_recoID_SF_err_AFII(double eta, double ET);                    *
 * double ele_trigger_SF_AFII(double eta, double ET, int set);              *
 * double ele_trigger_SF_err_AFII(double eta, double ET, int set);          *
 * int runnumber_to_set(int run_number)                                     *
 *                                                                          *
 * set = 0, 1, 2, 3 correpond to                                            *
 * period A-B3 (200804-203227)                                              *
 * period B4-D3 (203228-208178) (excluding C1-C5)                           *
 * period C1-C5 (206248-206954)                                             *
 * period D4 and later (208179 + )                                          *
 * History                                                                  *
 *         20 Dec 2012 -- created by H. Zhu                                 *
 ***************************************************************************/

#include <iostream>
#include <cmath>

// forward declaration of functions
double ele_ID_SF(double eta, double ET);
double ele_ID_SF_err(double eta, double ET);
double ele_reco_SF(double eta);
double ele_reco_SF_err(double eta);
double ele_recoID_SF(double eta, double ET);
double ele_recoID_SF_err(double eta, double ET);
double ele_trigger_SF(double eta, double ET, int set);
double ele_trigger_SF_err(double eta, double ET, int set);

double ele_ID_SF_AFII(double eta, double ET);
double ele_ID_SF_err_AFII(double eta, double ET);
double ele_reco_SF_AFII(double eta);
double ele_reco_SF_err_AFII(double eta);
double ele_recoID_SF_AFII(double eta, double ET);
double ele_recoID_SF_err_AFII(double eta, double ET);
double ele_trigger_SF_AFII(double eta, double ET, int set);
double ele_trigger_SF_err_AFII(double eta, double ET, int set);

int runnumber_to_set(int run_number);

// For ID+iso scale factors
inline double ele_ID_SF(double eta, double ET)
{

    double ele_eta = eta;
    double ele_ET = ET;
    
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};
    const double EtMin = 15.;
    
    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) || ele_ET < EtMin) return 0.;

    const double etabins[18] = {-2.47,-2.37,-2.01,-1.81,-1.37,
							    -1.15,-0.8,-0.6,-0.1,0,0.1,0.6,0.8,1.15,
							    1.52,1.81,2.01,2.37};
    const double ETbins[12] = {15.,20.,25.,30.,35.,40.,45., 50., 60., 70., 80., 100. }; // lower edges of et bins

        const double SFmatrix[12][18] = {{ 0.927, 0.960, 1.004, 1.006, 1.031, 0.998, 0.994, 0.970, 0.988, 0.997, 0.970, 0.995, 0.996, 1.024, 0.995, 1.008, 0.949, 0.918}, 
					 { 0.913, 0.945, 0.988, 0.990, 1.015, 0.982, 0.978, 0.955, 0.972, 0.981, 0.955, 0.979, 0.980, 1.008, 0.979, 0.992, 0.934, 0.903}, 
					 { 0.922, 0.954, 0.998, 1.000, 1.025, 0.992, 0.988, 0.964, 0.982, 0.991, 0.964, 0.989, 0.990, 1.018, 0.989, 1.002, 0.943, 0.912}, 
					 { 0.925, 0.957, 1.001, 1.003, 1.028, 0.995, 0.991, 0.967, 0.985, 0.995, 0.967, 0.992, 0.994, 1.021, 0.992, 1.005, 0.946, 0.915}, 
					 { 0.933, 0.965, 1.010, 1.012, 1.037, 1.004, 1.000, 0.976, 0.994, 1.003, 0.976, 1.001, 1.002, 1.030, 1.000, 1.014, 0.955, 0.923}, 
					 { 0.926, 0.959, 1.003, 1.005, 1.030, 0.997, 0.993, 0.969, 0.987, 0.996, 0.969, 0.994, 0.995, 1.023, 0.993, 1.007, 0.948, 0.917}, 
					 { 0.930, 0.962, 1.007, 1.009, 1.034, 1.001, 0.997, 0.973, 0.991, 1.000, 0.973, 0.998, 0.999, 1.027, 0.997, 1.011, 0.952, 0.920}, 
					 { 0.930, 0.963, 1.007, 1.009, 1.034, 1.001, 0.997, 0.973, 0.991, 1.000, 0.973, 0.998, 0.999, 1.027, 0.998, 1.011, 0.952, 0.921}, 
					 { 0.931, 0.963, 1.008, 1.010, 1.035, 1.002, 0.998, 0.974, 0.991, 1.001, 0.974, 0.999, 1.000, 1.028, 0.998, 1.012, 0.953, 0.921}, 
					 { 0.930, 0.963, 1.007, 1.009, 1.034, 1.001, 0.997, 0.973, 0.991, 1.000, 0.973, 0.998, 0.999, 1.027, 0.997, 1.011, 0.952, 0.920}, 
					 { 0.932, 0.964, 1.009, 1.011, 1.036, 1.003, 0.998, 0.974, 0.992, 1.002, 0.974, 0.999, 1.001, 1.029, 0.999, 1.012, 0.953, 0.922}, 
					 { 0.930, 0.963, 1.007, 1.009, 1.034, 1.001, 0.997, 0.973, 0.991, 1.000, 0.973, 0.998, 0.999, 1.027, 0.998, 1.011, 0.952, 0.921}}; 

    int etaI=-1; int ET_I=-1;   
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }
    for (int i=11; i>=0; i--){    // find eta index
        if ( ele_ET > ETbins[i] ) {
            ET_I = i;
            break;
        }
    }

    if (etaI == -1 || ET_I == -1) return 0.; // given the range check above this should not happen ...
    return SFmatrix[ET_I][etaI];
}

// For ID+iso scale factor uncertainties (symmetric)
inline double ele_ID_SF_err(double eta, double ET)
{

    double ele_eta = eta;
    double ele_ET = ET;
    
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};
    const double EtMin = 15.;

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) || ele_ET < EtMin) return 1.0;

    const double etabins[18] = {-2.47,-2.37,-2.01,-1.81,-1.37,
							    -1.15,-0.8,-0.6,-0.1,0,0.1,0.6,0.8,1.15,
							    1.52,1.81,2.01,2.37};
    const double ETbins[12] = {15.,20.,25.,30.,35.,40.,45., 50., 60., 70., 80., 100. }; // lower edges of et bins

       const double errmatrix[12][18] = {{ 0.029, 0.029, 0.030, 0.031, 0.031, 0.030, 0.030, 0.029, 0.032, 0.030, 0.029, 0.030, 0.030, 0.031, 0.031, 0.030, 0.029, 0.029}, 
					 { 0.025, 0.025, 0.026, 0.027, 0.027, 0.025, 0.026, 0.025, 0.028, 0.026, 0.025, 0.026, 0.026, 0.026, 0.026, 0.026, 0.025, 0.026}, 
					 { 0.023, 0.023, 0.024, 0.025, 0.025, 0.023, 0.023, 0.023, 0.026, 0.024, 0.023, 0.023, 0.023, 0.024, 0.024, 0.024, 0.023, 0.024}, 
					 { 0.023, 0.022, 0.023, 0.024, 0.024, 0.023, 0.023, 0.022, 0.025, 0.023, 0.022, 0.023, 0.023, 0.024, 0.024, 0.024, 0.022, 0.024}, 
					 { 0.022, 0.022, 0.023, 0.024, 0.023, 0.022, 0.022, 0.022, 0.025, 0.023, 0.022, 0.022, 0.022, 0.023, 0.023, 0.023, 0.022, 0.023}, 
					 { 0.022, 0.021, 0.023, 0.024, 0.023, 0.022, 0.022, 0.021, 0.024, 0.022, 0.021, 0.022, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					 { 0.022, 0.021, 0.023, 0.024, 0.023, 0.022, 0.022, 0.021, 0.024, 0.022, 0.021, 0.022, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					 { 0.022, 0.021, 0.023, 0.024, 0.023, 0.022, 0.022, 0.021, 0.024, 0.022, 0.021, 0.022, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					 { 0.022, 0.021, 0.023, 0.024, 0.023, 0.022, 0.022, 0.021, 0.024, 0.022, 0.021, 0.022, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					 { 0.022, 0.021, 0.023, 0.024, 0.023, 0.022, 0.022, 0.021, 0.024, 0.022, 0.021, 0.022, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					 { 0.022, 0.021, 0.023, 0.024, 0.023, 0.022, 0.022, 0.021, 0.024, 0.022, 0.021, 0.022, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					 { 0.022, 0.021, 0.023, 0.024, 0.023, 0.022, 0.022, 0.021, 0.024, 0.022, 0.021, 0.022, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}};  
       
    int etaI=-1; int ET_I=-1;
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }
    for (int i=11; i>=0; i--){    // find ET index
        if ( ele_ET > ETbins[i] ) {
            ET_I = i;
            break;
        }
    }

    if (etaI == -1 || ET_I == -1) return 1.0; // given the range check above this should not happen ...
    return errmatrix[ET_I][etaI];
}

inline double ele_reco_SF(double eta)
{
    double ele_eta = eta;
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) )  return 0.;

    const double etabins[18] = {-2.47, -2.37, -2.01, -1.81, -1.37, -1.15, -0.8, -0.6, -0.1, 0.0, 0.1, 0.6, 0.8, 1.15, 1.52, 1.81, 2.01, 2.37 };
    const double SFmatrix[18] = { 1.002, 1.001, 0.996, 1.001, 0.997, 0.995, 0.994, 0.992, 0.991, 0.985, 0.992, 0.996, 0.997, 0.997,0.997, 1.000, 1.001, 1.014};

    int etaI=-1;
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }

    if (etaI == -1) return 0.; // given the range check above this should not happen ...
    return SFmatrix[etaI];
}

// For reco SF uncertainties (symmetric)
inline double ele_reco_SF_err(double eta)
{
    double ele_eta = eta;
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) ) return 1.0;

    const double etabins[18] = {-2.47, -2.37, -2.01, -1.81, -1.37, -1.15, -0.8, -0.6, -0.1, 0.0, 0.1, 0.6, 0.8, 1.15, 1.52, 1.81, 2.01, 2.37 };
    const double errmatrix[18] = {0.009, 0.006, 0.007, 0.006, 0.006, 0.006, 0.007, 0.007, 0.008,0.009, 0.007, 0.007, 0.006, 0.006, 0.006, 0.006, 0.006, 0.010};

    int etaI=-1; 
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }

    if (etaI == -1) return 1.0; // given the range check above this should not happen ...
    return errmatrix[etaI];
}

//returns cumulative reco+ID SF
inline double ele_recoID_SF(double eta, double ET)
{

	double ele_eta = eta;
	double ele_ET = ET;
	double total_SF = ele_ID_SF(ele_eta, ele_ET) * ele_reco_SF(ele_eta);

	return total_SF;

}

//returns cumulative reco+ID SF uncertainty
inline double ele_recoID_SF_err(double eta, double ET)
{

	double ele_eta = eta;
	double ele_ET = ET;
	double ID_err = ele_ID_SF_err(ele_eta, ele_ET) / ele_ID_SF(ele_eta, ele_ET);  //need relative errors
	double reco_err = ele_reco_SF_err(ele_eta) / ele_reco_SF(ele_eta);

	double tot_rel_err = sqrt( pow(ID_err,2) + pow(reco_err,2) );
	double tot_abs_err = tot_rel_err * ele_recoID_SF(ele_eta, ele_ET);

	return tot_abs_err;

}

// For trigger SFs
inline double ele_trigger_SF(double eta, double ET, int set_or_run)
{
    int set = -1;
    if(set_or_run > 100) set = runnumber_to_set(set_or_run);
    else set = set_or_run;
 
    if(set<0 || set>3) {
	std::cout << "electron_MI_SF_R17.h ele_trigger_SF(): the trigger needs to be 0, 1, 2 or 3 You gave " << set << ". Returning 0. as trigger scale factor." << std::endl;
	return 0.;
    }

    double ele_eta = eta;
    double ele_ET = ET;
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};
    const double EtMin = 25.;

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) || ele_ET < EtMin) return 0.;

    const double etabins[18] = {-2.47,-2.37,-2.01,-1.81,-1.37,
							    -1.15,-0.8,-0.6,-0.1,0,0.1,0.6,0.8,1.15,
							    1.52,1.81,2.01,2.37};
    const double ETbins[15] = { 25., 26., 27., 28., 29., 30., 32., 35., 40., 45., 50., 60., 80., 150., 200.}; // lower edges of et bins

    int etaI=-1; int ET_I=-1;
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }
    for (int i=14; i>=0; i--){    // find ET index
        if ( ele_ET > ETbins[i] ) {
            ET_I = i;
            break;
        }
    }
    if (etaI == -1 || ET_I == -1) return 0.; // given the range check above this should not happen ...


    if(set==0) {
	const double SFmatrix[15][18] = {{ 0.320, 0.941, 0.956, 0.972, 0.987, 0.982, 0.963, 0.987, 0.989, 0.987, 0.989, 0.984, 0.978, 0.978, 0.962, 0.960, 0.926, 0.240}, 
					 { 0.318, 0.935, 0.949, 0.966, 0.980, 0.975, 0.956, 0.980, 0.982, 0.980, 0.982, 0.977, 0.972, 0.971, 0.955, 0.953, 0.919, 0.238}, 
					 { 0.317, 0.931, 0.946, 0.962, 0.977, 0.971, 0.953, 0.976, 0.978, 0.977, 0.978, 0.974, 0.968, 0.967, 0.952, 0.949, 0.916, 0.237}, 
					 { 0.317, 0.932, 0.946, 0.962, 0.977, 0.972, 0.953, 0.977, 0.979, 0.977, 0.978, 0.974, 0.968, 0.968, 0.952, 0.950, 0.916, 0.237}, 
					 { 0.320, 0.941, 0.956, 0.972, 0.987, 0.981, 0.963, 0.986, 0.988, 0.987, 0.988, 0.984, 0.978, 0.977, 0.962, 0.959, 0.925, 0.239}, 
					 { 0.320, 0.943, 0.957, 0.974, 0.989, 0.983, 0.964, 0.988, 0.990, 0.989, 0.990, 0.986, 0.980, 0.979, 0.963, 0.961, 0.927, 0.240}, 
					 { 0.321, 0.944, 0.959, 0.975, 0.990, 0.985, 0.966, 0.990, 0.992, 0.990, 0.992, 0.987, 0.981, 0.981, 0.965, 0.962, 0.928, 0.240}, 
					 { 0.322, 0.948, 0.963, 0.979, 0.994, 0.989, 0.970, 0.994, 0.996, 0.994, 0.996, 0.991, 0.985, 0.985, 0.969, 0.966, 0.932, 0.241}, 
					 { 0.324, 0.952, 0.966, 0.983, 0.998, 0.993, 0.974, 0.998, 1.000, 0.998, 1.000, 0.995, 0.989, 0.989, 0.973, 0.970, 0.936, 0.242}, 
					 { 0.324, 0.953, 0.968, 0.985, 1.000, 0.994, 0.975, 0.999, 1.001, 1.000, 1.001, 0.997, 0.991, 0.990, 0.974, 0.972, 0.937, 0.243}, 
					 { 0.324, 0.954, 0.969, 0.985, 1.000, 0.995, 0.976, 1.000, 1.002, 1.000, 1.002, 0.997, 0.991, 0.991, 0.975, 0.972, 0.938, 0.243}, 
					 { 0.328, 0.966, 0.981, 0.998, 1.013, 1.007, 0.988, 1.012, 1.015, 1.013, 1.014, 1.010, 1.004, 1.003, 0.987, 0.985, 0.950, 0.246}, 
					 { 0.328, 0.965, 0.980, 0.997, 1.012, 1.007, 0.987, 1.012, 1.014, 1.012, 1.014, 1.009, 1.003, 1.003, 0.986, 0.984, 0.949, 0.246}, 
					 { 0.328, 0.965, 0.980, 0.997, 1.012, 1.006, 0.987, 1.011, 1.014, 1.012, 1.013, 1.009, 1.003, 1.002, 0.986, 0.984, 0.949, 0.246}, 
					 { 0.327, 0.962, 0.977, 0.994, 1.009, 1.004, 0.984, 1.009, 1.011, 1.009, 1.011, 1.006, 1.000, 1.000, 0.984, 0.981, 0.946, 0.245}}; 

	return SFmatrix[ET_I][etaI];
    }else if(set==1) {
	const double SFmatrix[15][18] = {{ 1.017, 0.982, 0.953, 0.965, 0.983, 0.976, 0.959, 0.983, 0.980, 0.977, 0.984, 0.981, 0.977, 0.977, 0.962, 0.959, 0.982, 0.998}, 
					 { 1.021, 0.986, 0.958, 0.969, 0.987, 0.980, 0.963, 0.988, 0.984, 0.981, 0.988, 0.985, 0.981, 0.981, 0.967, 0.963, 0.987, 1.002}, 
					 { 1.025, 0.990, 0.961, 0.973, 0.991, 0.983, 0.967, 0.991, 0.987, 0.985, 0.991, 0.989, 0.984, 0.984, 0.970, 0.966, 0.990, 1.006}, 
					 { 1.024, 0.989, 0.960, 0.972, 0.990, 0.982, 0.965, 0.990, 0.986, 0.984, 0.990, 0.987, 0.983, 0.983, 0.969, 0.965, 0.989, 1.004}, 
					 { 1.027, 0.992, 0.963, 0.975, 0.993, 0.985, 0.968, 0.993, 0.989, 0.987, 0.993, 0.991, 0.986, 0.986, 0.972, 0.968, 0.992, 1.008}, 
					 { 1.027, 0.992, 0.963, 0.975, 0.993, 0.986, 0.969, 0.994, 0.990, 0.987, 0.994, 0.991, 0.987, 0.987, 0.972, 0.969, 0.992, 1.008}, 
					 { 1.028, 0.993, 0.964, 0.976, 0.994, 0.986, 0.969, 0.994, 0.990, 0.988, 0.994, 0.991, 0.987, 0.987, 0.973, 0.969, 0.993, 1.009}, 
					 { 1.028, 0.993, 0.964, 0.976, 0.994, 0.987, 0.970, 0.994, 0.991, 0.988, 0.995, 0.992, 0.988, 0.988, 0.973, 0.970, 0.993, 1.009}, 
					 { 1.028, 0.993, 0.964, 0.976, 0.994, 0.987, 0.970, 0.995, 0.991, 0.988, 0.995, 0.992, 0.988, 0.988, 0.973, 0.970, 0.993, 1.009}, 
					 { 1.030, 0.995, 0.966, 0.978, 0.996, 0.988, 0.972, 0.996, 0.993, 0.990, 0.997, 0.994, 0.990, 0.990, 0.975, 0.971, 0.995, 1.011}, 
					 { 1.031, 0.996, 0.967, 0.979, 0.997, 0.989, 0.973, 0.997, 0.993, 0.991, 0.997, 0.995, 0.991, 0.991, 0.976, 0.972, 0.996, 1.012}, 
					 { 1.033, 0.998, 0.969, 0.981, 0.999, 0.991, 0.974, 0.999, 0.995, 0.993, 0.999, 0.997, 0.992, 0.992, 0.978, 0.974, 0.998, 1.014}, 
					 { 1.032, 0.997, 0.967, 0.979, 0.997, 0.990, 0.973, 0.998, 0.994, 0.992, 0.998, 0.995, 0.991, 0.991, 0.977, 0.973, 0.997, 1.013}, 
					 { 1.030, 0.994, 0.965, 0.977, 0.995, 0.988, 0.971, 0.996, 0.992, 0.989, 0.996, 0.993, 0.989, 0.989, 0.974, 0.971, 0.994, 1.010}, 
					 { 1.029, 0.994, 0.965, 0.977, 0.995, 0.987, 0.971, 0.995, 0.992, 0.989, 0.996, 0.993, 0.989, 0.989, 0.974, 0.970, 0.994, 1.010}}; 

	return SFmatrix[ET_I][etaI];

    }else if(set==2) {
	const double SFmatrix[15][18] = {{ 0.978, 0.979, 0.939, 0.963, 0.974, 0.968, 0.952, 0.974, 0.963, 0.974, 0.976, 0.971, 0.970, 0.971, 0.958, 0.959, 0.988, 0.969}, 
					 { 0.982, 0.983, 0.943, 0.967, 0.978, 0.972, 0.956, 0.978, 0.967, 0.978, 0.980, 0.975, 0.974, 0.975, 0.961, 0.963, 0.992, 0.973}, 
					 { 0.998, 0.999, 0.958, 0.983, 0.994, 0.987, 0.972, 0.993, 0.983, 0.994, 0.996, 0.991, 0.990, 0.991, 0.977, 0.978, 1.008, 0.989}, 
					 { 0.994, 0.995, 0.955, 0.980, 0.990, 0.984, 0.968, 0.990, 0.980, 0.991, 0.993, 0.987, 0.987, 0.987, 0.974, 0.975, 1.005, 0.985}, 
					 { 0.980, 0.981, 0.941, 0.966, 0.976, 0.970, 0.954, 0.976, 0.966, 0.977, 0.979, 0.973, 0.973, 0.973, 0.960, 0.961, 0.990, 0.971}, 
					 { 0.993, 0.994, 0.954, 0.979, 0.989, 0.983, 0.967, 0.989, 0.979, 0.990, 0.992, 0.986, 0.986, 0.986, 0.973, 0.974, 1.003, 0.984}, 
					 { 0.995, 0.996, 0.955, 0.980, 0.991, 0.984, 0.969, 0.991, 0.980, 0.991, 0.993, 0.988, 0.987, 0.988, 0.974, 0.975, 1.005, 0.986}, 
					 { 0.995, 0.996, 0.956, 0.981, 0.991, 0.985, 0.969, 0.991, 0.980, 0.992, 0.994, 0.988, 0.987, 0.988, 0.975, 0.976, 1.005, 0.986}, 
					 { 0.994, 0.995, 0.955, 0.980, 0.990, 0.984, 0.968, 0.990, 0.979, 0.990, 0.993, 0.987, 0.986, 0.987, 0.974, 0.975, 1.004, 0.985}, 
					 { 0.993, 0.994, 0.954, 0.979, 0.990, 0.983, 0.967, 0.989, 0.979, 0.990, 0.992, 0.987, 0.986, 0.986, 0.973, 0.974, 1.004, 0.984}, 
					 { 0.997, 0.998, 0.957, 0.982, 0.993, 0.986, 0.971, 0.992, 0.982, 0.993, 0.995, 0.990, 0.989, 0.990, 0.976, 0.977, 1.007, 0.988}, 
					 { 0.998, 0.999, 0.959, 0.984, 0.994, 0.988, 0.972, 0.994, 0.984, 0.995, 0.997, 0.991, 0.991, 0.991, 0.978, 0.979, 1.009, 0.989}, 
					 { 0.994, 0.995, 0.955, 0.980, 0.991, 0.984, 0.968, 0.990, 0.980, 0.991, 0.993, 0.987, 0.987, 0.987, 0.974, 0.975, 1.005, 0.985}, 
					 { 1.003, 1.004, 0.964, 0.989, 0.999, 0.993, 0.977, 0.999, 0.988, 1.000, 1.002, 0.996, 0.996, 0.996, 0.983, 0.984, 1.014, 0.994}, 
					 { 1.009, 1.010, 0.969, 0.994, 1.005, 0.998, 0.982, 1.004, 0.994, 1.005, 1.007, 1.002, 1.001, 1.002, 0.988, 0.989, 1.019, 1.000}};
	
	return SFmatrix[ET_I][etaI];
    }else if(set==3) {
	const double SFmatrix[15][18] = {{ 1.010, 0.988, 0.950, 0.977, 0.977, 0.980, 0.958, 0.983, 0.995, 0.995, 0.984, 0.982, 0.984, 0.976, 0.979, 0.955, 0.989, 0.995}, 
					 { 1.015, 0.993, 0.955, 0.982, 0.983, 0.986, 0.964, 0.988, 1.000, 1.001, 0.990, 0.987, 0.989, 0.981, 0.985, 0.960, 0.994, 1.001}, 
					 { 1.023, 1.001, 0.962, 0.990, 0.990, 0.993, 0.971, 0.995, 1.008, 1.009, 0.997, 0.995, 0.996, 0.989, 0.992, 0.967, 1.002, 1.009}, 
					 { 1.019, 0.997, 0.959, 0.986, 0.987, 0.990, 0.967, 0.992, 1.004, 1.005, 0.994, 0.991, 0.993, 0.985, 0.989, 0.964, 0.998, 1.005}, 
					 { 1.022, 0.999, 0.961, 0.988, 0.989, 0.992, 0.970, 0.994, 1.006, 1.007, 0.996, 0.993, 0.995, 0.987, 0.991, 0.966, 1.000, 1.007}, 
					 { 1.026, 1.003, 0.965, 0.992, 0.993, 0.996, 0.974, 0.998, 1.011, 1.011, 1.000, 0.997, 0.999, 0.991, 0.995, 0.970, 1.004, 1.011}, 
					 { 1.028, 1.005, 0.967, 0.994, 0.995, 0.998, 0.976, 1.000, 1.013, 1.013, 1.002, 0.999, 1.001, 0.993, 0.997, 0.972, 1.006, 1.013}, 
					 { 1.028, 1.006, 0.968, 0.995, 0.996, 0.999, 0.976, 1.001, 1.013, 1.014, 1.003, 1.000, 1.002, 0.994, 0.997, 0.973, 1.007, 1.014}, 
					 { 1.030, 1.007, 0.969, 0.996, 0.997, 1.000, 0.978, 1.002, 1.015, 1.015, 1.004, 1.001, 1.003, 0.995, 0.999, 0.974, 1.008, 1.015}, 
					 { 1.032, 1.009, 0.971, 0.998, 0.999, 1.002, 0.979, 1.004, 1.017, 1.017, 1.006, 1.003, 1.005, 0.997, 1.001, 0.976, 1.010, 1.017}, 
					 { 1.035, 1.012, 0.974, 1.001, 1.002, 1.005, 0.982, 1.007, 1.020, 1.020, 1.009, 1.006, 1.008, 1.000, 1.004, 0.979, 1.013, 1.021}, 
					 { 1.025, 1.002, 0.964, 0.991, 0.992, 0.995, 0.973, 0.997, 1.009, 1.010, 0.999, 0.996, 0.998, 0.990, 0.994, 0.969, 1.003, 1.010}, 
					 { 1.021, 0.998, 0.960, 0.988, 0.988, 0.991, 0.969, 0.993, 1.006, 1.006, 0.995, 0.993, 0.994, 0.987, 0.990, 0.965, 1.000, 1.006}, 
					 { 1.020, 0.997, 0.959, 0.987, 0.987, 0.990, 0.968, 0.992, 1.005, 1.005, 0.994, 0.992, 0.993, 0.986, 0.989, 0.964, 0.998, 1.005}, 
					 { 1.021, 0.998, 0.960, 0.987, 0.988, 0.991, 0.969, 0.993, 1.006, 1.006, 0.995, 0.992, 0.994, 0.986, 0.990, 0.965, 0.999, 1.006}}; 

	
	return SFmatrix[ET_I][etaI];
    }else 
      return 0.;

}

// For trigger SF uncertainties (symmetric)
inline double ele_trigger_SF_err(double eta, double ET, int set_or_run)
{
    int set = -1;
    if(set_or_run > 100) set = runnumber_to_set(set_or_run);
    else set = set_or_run;

    if(set<0 || set>3) {
      std::cout << "electron_MI_SF_R17.h ele_trigger_SF_err(): the trigger needs to be 0, 1, 2 or 3. You gave " << set << ". Returning 1. as trigger error on scale factor." << std::endl;
      return 1.0;
    }

    double ele_eta = eta;
    double ele_ET = ET;
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};
    const double EtMin = 25.;

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) || ele_ET < EtMin) return 1.0;

    const double etabins[18] = {-2.47,-2.37,-2.01,-1.81,-1.37,
							    -1.15,-0.8,-0.6,-0.1,0,0.1,0.6,0.8,1.15,
							    1.52,1.81,2.01,2.37};

    const double ETbins[15] = { 25., 26., 27., 28., 29., 30., 32., 35., 40., 45., 50., 60., 80., 150., 200.}; // lower edges of et bins

    int etaI=-1; int ET_I=-1;
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }
    for (int i=14; i>=0; i--){    // find ET index
        if ( ele_ET > ETbins[i] ) {
            ET_I = i;
            break;
        }
    }
    if (etaI == -1 || ET_I == -1) return 1.0; // given the range check above this should not happen ...

    if(set==0){
	const double errmatrix[15][18] = {{ 0.019, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.018}, 
					  { 0.018, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.018}, 
					  { 0.018, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.018}, 
					  { 0.018, 0.007, 0.008, 0.008, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.008, 0.007, 0.018}, 
					  { 0.018, 0.007, 0.007, 0.007, 0.006, 0.006, 0.007, 0.006, 0.007, 0.007, 0.006, 0.006, 0.006, 0.006, 0.007, 0.007, 0.007, 0.018}, 
					  { 0.018, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.018}, 
					  { 0.018, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.018}, 
					  { 0.018, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.018}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.018}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.018}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.018}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.019}, 
					  { 0.019, 0.007, 0.007, 0.007, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007, 0.006, 0.019}, 
					  { 0.019, 0.011, 0.011, 0.011, 0.010, 0.010, 0.010, 0.010, 0.011, 0.011, 0.010, 0.010, 0.010, 0.010, 0.011, 0.011, 0.010, 0.019}, 
					  { 0.019, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.012, 0.019}}; 
	

	return errmatrix[ET_I][etaI];			                                 
    }else if(set==1) {
	const double errmatrix[15][18] = {{ 0.010, 0.009, 0.008, 0.009, 0.009, 0.008, 0.008, 0.008, 0.009, 0.009, 0.009, 0.009, 0.008, 0.008, 0.009, 0.008, 0.009, 0.009}, 
					  { 0.007, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007}, 
					  { 0.008, 0.006, 0.007, 0.007, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007, 0.006, 0.006, 0.008}, 
					  { 0.007, 0.006, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.007}, 
					  { 0.007, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					  { 0.008, 0.007, 0.007, 0.007, 0.007, 0.006, 0.006, 0.006, 0.007, 0.007, 0.006, 0.006, 0.006, 0.006, 0.007, 0.007, 0.007, 0.008}, 
					  { 0.008, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.008}}; 
	
	return errmatrix[ET_I][etaI];			                                 

    }else if(set==2) {
	const double errmatrix[15][18] = {{ 0.025, 0.021, 0.021, 0.021, 0.021, 0.021, 0.020, 0.021, 0.021, 0.021, 0.021, 0.021, 0.021, 0.021, 0.021, 0.021, 0.021, 0.025}, 
					  { 0.019, 0.012, 0.012, 0.011, 0.011, 0.011, 0.011, 0.011, 0.012, 0.012, 0.011, 0.011, 0.011, 0.011, 0.011, 0.012, 0.012, 0.018}, 
					  { 0.018, 0.011, 0.011, 0.010, 0.010, 0.010, 0.010, 0.010, 0.011, 0.011, 0.010, 0.010, 0.010, 0.010, 0.010, 0.011, 0.011, 0.017}, 
					  { 0.017, 0.010, 0.010, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.010, 0.009, 0.009, 0.009, 0.009, 0.009, 0.010, 0.010, 0.017}, 
					  { 0.017, 0.009, 0.010, 0.009, 0.008, 0.008, 0.008, 0.008, 0.009, 0.009, 0.008, 0.008, 0.008, 0.008, 0.009, 0.010, 0.009, 0.016}, 
					  { 0.017, 0.008, 0.009, 0.008, 0.007, 0.007, 0.007, 0.007, 0.008, 0.008, 0.007, 0.007, 0.007, 0.007, 0.008, 0.009, 0.008, 0.016}, 
					  { 0.016, 0.008, 0.008, 0.007, 0.006, 0.006, 0.006, 0.006, 0.007, 0.007, 0.006, 0.006, 0.006, 0.006, 0.007, 0.008, 0.007, 0.015}, 
					  { 0.016, 0.007, 0.008, 0.007, 0.006, 0.006, 0.006, 0.005, 0.007, 0.007, 0.005, 0.006, 0.006, 0.006, 0.007, 0.008, 0.007, 0.015}, 
					  { 0.016, 0.007, 0.008, 0.007, 0.006, 0.006, 0.006, 0.005, 0.007, 0.007, 0.005, 0.006, 0.006, 0.006, 0.007, 0.008, 0.007, 0.015}, 
					  { 0.016, 0.007, 0.008, 0.007, 0.006, 0.006, 0.006, 0.005, 0.007, 0.007, 0.005, 0.006, 0.006, 0.006, 0.007, 0.008, 0.007, 0.015}, 
					  { 0.016, 0.008, 0.009, 0.007, 0.007, 0.006, 0.007, 0.006, 0.007, 0.008, 0.006, 0.007, 0.006, 0.007, 0.007, 0.008, 0.007, 0.016}, 
					  { 0.016, 0.008, 0.009, 0.007, 0.007, 0.006, 0.007, 0.006, 0.007, 0.007, 0.006, 0.007, 0.006, 0.006, 0.007, 0.008, 0.007, 0.015}, 
					  { 0.017, 0.009, 0.009, 0.008, 0.007, 0.007, 0.007, 0.007, 0.008, 0.008, 0.007, 0.007, 0.007, 0.007, 0.008, 0.009, 0.008, 0.016}, 
					  { 0.022, 0.017, 0.017, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.017, 0.017, 0.021}, 
					  { 0.031, 0.027, 0.026, 0.026, 0.026, 0.026, 0.026, 0.026, 0.026, 0.027, 0.026, 0.026, 0.026, 0.026, 0.026, 0.027, 0.027, 0.030}};
	

	return errmatrix[ET_I][etaI];			                                 

    }else if(set==3) {
	const double errmatrix[15][18] =  {{ 0.011, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.011}, 
					   { 0.008, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007}, 
					   { 0.008, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007}, 
					   { 0.007, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007}, 
					   { 0.008, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007}, 
					   { 0.007, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					   { 0.007, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					   { 0.007, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					   { 0.007, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					   { 0.007, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					   { 0.007, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					   { 0.007, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					   { 0.007, 0.006, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.005, 0.007}, 
					   { 0.008, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.008}, 
					   { 0.009, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.009}}; 


	return errmatrix[ET_I][etaI];			                                 

    }else
      return 1.0;
}


// For ID+iso scale factors
inline double ele_ID_SF_AFII(double eta, double ET)
{

    double ele_eta = eta;
    double ele_ET = ET;

    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};
    const double EtMin = 15.;

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) || ele_ET < EtMin) return 0.;

    const double etabins[18] = {-2.47,-2.37,-2.01,-1.81,-1.37,
							    -1.15,-0.8,-0.6,-0.1,0,0.1,0.6,0.8,1.15,
							    1.52,1.81,2.01,2.37};
    const double ETbins[12] = {15.,20.,25.,30.,35.,40.,45., 50., 60., 70., 80., 100. }; // lower edges of et bins

        const double SFmatrix[12][18] = {{ 0.938, 0.968, 1.002, 1.007, 1.034, 1.023, 1.042, 0.997, 1.021, 1.021, 1.001, 1.048, 1.030, 1.036, 1.000, 1.002, 0.961, 0.923}, 
					 { 0.928, 0.957, 0.991, 0.996, 1.023, 1.012, 1.031, 0.986, 1.010, 1.010, 0.990, 1.037, 1.019, 1.024, 0.989, 0.991, 0.951, 0.913}, 
					 { 0.940, 0.970, 1.004, 1.009, 1.036, 1.025, 1.044, 0.998, 1.023, 1.023, 1.003, 1.050, 1.032, 1.038, 1.001, 1.004, 0.963, 0.925}, 
					 { 0.939, 0.969, 1.004, 1.008, 1.035, 1.024, 1.044, 0.998, 1.022, 1.022, 1.002, 1.049, 1.031, 1.037, 1.001, 1.003, 0.963, 0.925}, 
					 { 0.946, 0.976, 1.010, 1.015, 1.042, 1.031, 1.051, 1.005, 1.029, 1.029, 1.009, 1.056, 1.038, 1.044, 1.008, 1.010, 0.969, 0.931}, 
					 { 0.949, 0.980, 1.014, 1.019, 1.046, 1.035, 1.055, 1.009, 1.033, 1.033, 1.013, 1.061, 1.042, 1.048, 1.012, 1.014, 0.973, 0.935}, 
					 { 0.950, 0.981, 1.015, 1.020, 1.048, 1.036, 1.056, 1.010, 1.034, 1.034, 1.014, 1.062, 1.043, 1.049, 1.013, 1.015, 0.974, 0.936}, 
					 { 0.950, 0.981, 1.016, 1.020, 1.048, 1.037, 1.056, 1.010, 1.034, 1.034, 1.014, 1.062, 1.044, 1.050, 1.013, 1.015, 0.974, 0.936}, 
					 { 0.951, 0.981, 1.016, 1.021, 1.048, 1.037, 1.057, 1.010, 1.035, 1.035, 1.015, 1.062, 1.044, 1.050, 1.013, 1.016, 0.975, 0.936}, 
					 { 0.950, 0.981, 1.016, 1.020, 1.048, 1.037, 1.056, 1.010, 1.034, 1.034, 1.014, 1.062, 1.044, 1.050, 1.013, 1.015, 0.974, 0.936}, 
					 { 0.951, 0.981, 1.016, 1.021, 1.048, 1.037, 1.056, 1.010, 1.035, 1.035, 1.015, 1.062, 1.044, 1.050, 1.013, 1.015, 0.974, 0.936}, 
					 { 0.951, 0.981, 1.016, 1.021, 1.048, 1.037, 1.057, 1.010, 1.035, 1.035, 1.015, 1.063, 1.044, 1.050, 1.013, 1.016, 0.975, 0.936}};
	
    int etaI=-1; int ET_I=-1;   
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }
    for (int i=11; i>=0; i--){    // find eta index
        if ( ele_ET > ETbins[i] ) {
            ET_I = i;
            break;
        }
    }

    if (etaI == -1 || ET_I == -1) return 0.; // given the range check above this should not happen ...  
    
    return SFmatrix[ET_I][etaI];
}

// For ID+iso scale factor uncertainties (symmetric)
inline double ele_ID_SF_err_AFII(double eta, double ET)
{

    double ele_eta = eta;
    double ele_ET = ET;
    
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};
    const double EtMin = 15.;
    
    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) || ele_ET < EtMin) return 1.0;

    const double etabins[18] = {-2.47,-2.37,-2.01,-1.81,-1.37,
							    -1.15,-0.8,-0.6,-0.1,0,0.1,0.6,0.8,1.15,
							    1.52,1.81,2.01,2.37};
    const double ETbins[12] = {15.,20.,25.,30.,35.,40.,45., 50., 60., 70., 80., 100. }; // lower edges of et bins

        const double errmatrix[12][18] = {{ 0.029, 0.029, 0.031, 0.032, 0.031, 0.031, 0.032, 0.030, 0.031, 0.032, 0.030, 0.032, 0.031, 0.031, 0.031, 0.031, 0.029, 0.030}, 
					  { 0.025, 0.025, 0.026, 0.027, 0.026, 0.026, 0.027, 0.025, 0.027, 0.027, 0.025, 0.027, 0.026, 0.026, 0.026, 0.026, 0.025, 0.026}, 
					  { 0.023, 0.023, 0.024, 0.025, 0.024, 0.024, 0.024, 0.023, 0.024, 0.025, 0.023, 0.024, 0.024, 0.024, 0.024, 0.024, 0.023, 0.024}, 
					  { 0.022, 0.022, 0.023, 0.024, 0.023, 0.023, 0.024, 0.022, 0.024, 0.024, 0.022, 0.024, 0.023, 0.023, 0.024, 0.023, 0.022, 0.024}, 
					  { 0.022, 0.022, 0.023, 0.024, 0.023, 0.023, 0.023, 0.022, 0.023, 0.024, 0.022, 0.023, 0.023, 0.023, 0.023, 0.023, 0.022, 0.023}, 
					  { 0.022, 0.021, 0.022, 0.024, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.022, 0.023, 0.023, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					  { 0.022, 0.021, 0.022, 0.024, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					  { 0.022, 0.021, 0.022, 0.024, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					  { 0.022, 0.021, 0.022, 0.024, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					  { 0.022, 0.021, 0.022, 0.024, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					  { 0.022, 0.021, 0.022, 0.024, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}, 
					  { 0.022, 0.021, 0.022, 0.024, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.022, 0.023, 0.022, 0.023, 0.023, 0.023, 0.021, 0.023}}; 

	int etaI=-1; int ET_I=-1;   
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }
    for (int i=11; i>=0; i--){    // find eta index
        if ( ele_ET > ETbins[i] ) {
            ET_I = i;
            break;
        }
    }

    if (etaI == -1 || ET_I == -1) return 1.0; // given the range check above this should not happen ...
    return errmatrix[ET_I][etaI];
}

inline double ele_reco_SF_AFII(double eta)
{
    double ele_eta = eta;
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) )  return 0.;

    const double etabins[18] = {-2.47, -2.37, -2.01, -1.81, -1.37, -1.15, -0.8, -0.6, -0.1, 0.0, 0.1, 0.6, 0.8, 1.15, 1.52, 1.81, 2.01, 2.37 };
    const double SFmatrix[18] = { 1.001, 1.000, 0.996, 1.000, 0.997, 0.995, 0.995, 0.992, 0.991, 0.986, 0.992, 0.996, 0.996, 0.998, 0.997, 0.999, 1.001, 1.013};

    int etaI=-1;
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }

    if (etaI == -1) return 0.; // given the range check above this should not happen ...
    return SFmatrix[etaI];
}

// For reco SF uncertainties (symmetric)
inline double ele_reco_SF_err_AFII(double eta)
{
    double ele_eta = eta;
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) ) return 1.0;

    const double etabins[18] = {-2.47, -2.37, -2.01, -1.81, -1.37, -1.15, -0.8, -0.6, -0.1, 0.0, 0.1, 0.6, 0.8, 1.15, 1.52, 1.81, 2.01, 2.37 };
    const double errmatrix[18] = {0.009, 0.006, 0.007, 0.006, 0.006, 0.006, 0.007, 0.007, 0.008,0.008, 0.007, 0.007, 0.006, 0.006, 0.006, 0.007, 0.006, 0.010};

    int etaI=-1; 
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }

    if (etaI == -1) return 1.0; // given the range check above this should not happen ...
    return errmatrix[etaI];
}



//returns cumulative reco+ID SF
inline double ele_recoID_SF_AFII(double eta, double ET)
{

	double ele_eta = eta;
	double ele_ET = ET;
	double total_SF = ele_ID_SF_AFII(ele_eta, ele_ET) * ele_reco_SF_AFII(ele_eta);

	return total_SF;

}

//returns cumulative reco+ID SF uncertainty
inline double ele_recoID_SF_err_AFII(double eta, double ET)
{

	double ele_eta = eta;
	double ele_ET = ET;
	double ID_err = ele_ID_SF_err_AFII(ele_eta, ele_ET) / ele_ID_SF_AFII(ele_eta, ele_ET);  //need relative errors
	double reco_err = ele_reco_SF_err_AFII(ele_eta) / ele_reco_SF_AFII(ele_eta);

	double tot_rel_err = sqrt( pow(ID_err,2) + pow(reco_err,2) );
	double tot_abs_err = tot_rel_err * ele_recoID_SF_AFII(ele_eta, ele_ET);

	return tot_abs_err;

}

inline double ele_trigger_SF_AFII(double eta, double ET, int set_or_run)
{

    int set = -1;
    if(set_or_run > 100) set = runnumber_to_set(set_or_run);
    else set = set_or_run;
    
    if(set<0 || set>3) {
      std::cout << "electron_MI_SF_R17.h ele_trigger_SF(): the trigger needs to be 0, 1, 2 or 3 You gave " << set << ". Returning 0. as trigger scale factor." << std::endl;
      return 0.;
    }

    double ele_eta = eta;
    double ele_ET = ET;
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};
    const double EtMin = 25.;

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) || ele_ET < EtMin) return 0.;

    const double etabins[18] = {-2.47,-2.37,-2.01,-1.81,-1.37,
							    -1.15,-0.8,-0.6,-0.1,0,0.1,0.6,0.8,1.15,
							    1.52,1.81,2.01,2.37};
    const double ETbins[15] = { 25., 26., 27., 28., 29., 30., 32., 35., 40., 45., 50., 60., 80., 150., 200.}; // lower edges of et bins

    int etaI=-1; int ET_I=-1;
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }
    for (int i=14; i>=0; i--){    // find ET index
        if ( ele_ET > ETbins[i] ) {
            ET_I = i;
            break;
        }
    }
    if (etaI == -1 || ET_I == -1) return 0.; // given the range check above this should not happen ...


    if(set==0) {
	const double SFmatrix[15][18] = {{ 0.332, 0.942, 0.941, 0.974, 0.986, 1.015, 0.965, 0.984, 1.003, 0.996, 0.986, 0.984, 1.011, 0.977, 0.963, 0.946, 0.926, 0.251}, 
					 { 0.328, 0.930, 0.929, 0.961, 0.973, 1.002, 0.952, 0.971, 0.990, 0.983, 0.973, 0.972, 0.998, 0.965, 0.950, 0.933, 0.914, 0.248}, 
					 { 0.328, 0.929, 0.929, 0.961, 0.972, 1.001, 0.951, 0.970, 0.989, 0.983, 0.972, 0.971, 0.997, 0.964, 0.950, 0.933, 0.913, 0.248}, 
					 { 0.329, 0.934, 0.934, 0.966, 0.977, 1.006, 0.957, 0.976, 0.994, 0.988, 0.978, 0.976, 1.002, 0.969, 0.955, 0.938, 0.918, 0.249}, 
					 { 0.332, 0.943, 0.942, 0.975, 0.987, 1.016, 0.965, 0.985, 1.004, 0.997, 0.987, 0.985, 1.012, 0.978, 0.964, 0.947, 0.926, 0.251}, 
					 { 0.336, 0.953, 0.952, 0.985, 0.997, 1.026, 0.976, 0.995, 1.014, 1.008, 0.997, 0.996, 1.022, 0.989, 0.974, 0.956, 0.936, 0.254}, 
					 { 0.336, 0.952, 0.952, 0.985, 0.997, 1.026, 0.975, 0.995, 1.014, 1.007, 0.997, 0.995, 1.022, 0.988, 0.973, 0.956, 0.936, 0.254}, 
					 { 0.338, 0.958, 0.958, 0.991, 1.003, 1.033, 0.981, 1.001, 1.020, 1.014, 1.003, 1.002, 1.028, 0.995, 0.980, 0.962, 0.942, 0.255}, 
					 { 0.340, 0.964, 0.963, 0.997, 1.008, 1.038, 0.987, 1.007, 1.026, 1.019, 1.009, 1.007, 1.034, 1.000, 0.985, 0.968, 0.947, 0.257}, 
					 { 0.341, 0.968, 0.967, 1.001, 1.013, 1.043, 0.991, 1.011, 1.031, 1.024, 1.013, 1.012, 1.039, 1.004, 0.989, 0.972, 0.951, 0.258}, 
					 { 0.342, 0.969, 0.969, 1.002, 1.014, 1.044, 0.992, 1.012, 1.032, 1.025, 1.014, 1.013, 1.040, 1.006, 0.991, 0.973, 0.952, 0.258}, 
					 { 0.339, 0.960, 0.960, 0.993, 1.005, 1.035, 0.984, 1.003, 1.023, 1.016, 1.005, 1.004, 1.031, 0.997, 0.982, 0.964, 0.944, 0.256}, 
					 { 0.339, 0.960, 0.960, 0.993, 1.005, 1.035, 0.983, 1.003, 1.022, 1.016, 1.005, 1.004, 1.030, 0.996, 0.982, 0.964, 0.944, 0.256}, 
					 { 0.338, 0.959, 0.959, 0.992, 1.004, 1.034, 0.982, 1.002, 1.021, 1.015, 1.004, 1.003, 1.029, 0.995, 0.981, 0.963, 0.943, 0.256}, 
					 { 0.341, 0.966, 0.966, 1.000, 1.011, 1.041, 0.990, 1.010, 1.029, 1.022, 1.012, 1.010, 1.037, 1.003, 0.988, 0.970, 0.950, 0.258}}; 

	return SFmatrix[ET_I][etaI];
    }else if(set==1) {
	const double SFmatrix[15][18] = {{ 1.060, 0.984, 0.939, 0.968, 0.983, 1.010, 0.962, 0.982, 0.995, 0.990, 0.982, 0.983, 1.011, 0.978, 0.964, 0.946, 0.984, 1.044}, 
					 { 1.059, 0.984, 0.939, 0.967, 0.982, 1.010, 0.962, 0.981, 0.994, 0.989, 0.981, 0.983, 1.010, 0.978, 0.963, 0.946, 0.984, 1.043}, 
					 { 1.065, 0.989, 0.943, 0.972, 0.987, 1.015, 0.966, 0.986, 0.999, 0.994, 0.986, 0.988, 1.016, 0.983, 0.968, 0.950, 0.989, 1.048}, 
					 { 1.067, 0.991, 0.946, 0.975, 0.989, 1.017, 0.969, 0.988, 1.002, 0.996, 0.989, 0.990, 1.018, 0.985, 0.971, 0.953, 0.991, 1.051}, 
					 { 1.070, 0.994, 0.948, 0.977, 0.992, 1.020, 0.971, 0.991, 1.005, 0.999, 0.991, 0.993, 1.021, 0.987, 0.973, 0.955, 0.994, 1.054}, 
					 { 1.078, 1.002, 0.956, 0.985, 1.000, 1.028, 0.979, 0.999, 1.013, 1.007, 0.999, 1.001, 1.029, 0.995, 0.981, 0.963, 1.002, 1.062}, 
					 { 1.079, 1.002, 0.956, 0.986, 1.001, 1.029, 0.980, 1.000, 1.013, 1.008, 1.000, 1.001, 1.030, 0.996, 0.982, 0.964, 1.002, 1.063}, 
					 { 1.081, 1.004, 0.958, 0.988, 1.002, 1.031, 0.982, 1.001, 1.015, 1.009, 1.002, 1.003, 1.032, 0.998, 0.983, 0.965, 1.004, 1.065}, 
					 { 1.083, 1.006, 0.960, 0.989, 1.004, 1.033, 0.983, 1.003, 1.017, 1.011, 1.004, 1.005, 1.033, 1.000, 0.985, 0.967, 1.006, 1.067}, 
					 { 1.088, 1.011, 0.965, 0.994, 1.009, 1.038, 0.988, 1.008, 1.022, 1.016, 1.009, 1.010, 1.038, 1.005, 0.990, 0.972, 1.011, 1.072}, 
					 { 1.090, 1.013, 0.966, 0.996, 1.011, 1.039, 0.990, 1.010, 1.024, 1.018, 1.010, 1.012, 1.040, 1.006, 0.992, 0.973, 1.012, 1.074}, 
					 { 1.069, 0.993, 0.947, 0.976, 0.991, 1.019, 0.970, 0.990, 1.004, 0.998, 0.991, 0.992, 1.020, 0.987, 0.972, 0.954, 0.993, 1.053}, 
					 { 1.068, 0.992, 0.946, 0.975, 0.990, 1.018, 0.969, 0.989, 1.002, 0.997, 0.989, 0.991, 1.019, 0.985, 0.971, 0.953, 0.991, 1.051}, 
					 { 1.066, 0.990, 0.944, 0.973, 0.988, 1.016, 0.967, 0.987, 1.000, 0.995, 0.987, 0.989, 1.017, 0.983, 0.969, 0.951, 0.990, 1.050}, 
					 { 1.074, 0.997, 0.952, 0.981, 0.995, 1.024, 0.975, 0.994, 1.008, 1.002, 0.995, 0.996, 1.024, 0.991, 0.977, 0.959, 0.997, 1.057}}; 

	return SFmatrix[ET_I][etaI];

    }else if(set==2) {
	const double SFmatrix[15][18] = {{ 1.020, 0.982, 0.926, 0.968, 0.975, 1.003, 0.957, 0.973, 0.981, 0.986, 0.976, 0.974, 1.005, 0.973, 0.960, 0.947, 0.990, 1.016}, 
					 { 1.016, 0.978, 0.923, 0.964, 0.971, 0.999, 0.953, 0.969, 0.978, 0.983, 0.972, 0.970, 1.001, 0.970, 0.956, 0.943, 0.986, 1.012}, 
					 { 1.036, 0.997, 0.940, 0.983, 0.989, 1.018, 0.971, 0.988, 0.996, 1.001, 0.991, 0.989, 1.020, 0.988, 0.974, 0.961, 1.005, 1.031}, 
					 { 1.036, 0.997, 0.940, 0.983, 0.989, 1.018, 0.971, 0.988, 0.996, 1.001, 0.991, 0.989, 1.020, 0.988, 0.974, 0.961, 1.005, 1.031}, 
					 { 1.020, 0.982, 0.926, 0.968, 0.975, 1.003, 0.957, 0.973, 0.981, 0.986, 0.976, 0.974, 1.005, 0.973, 0.960, 0.947, 0.990, 1.016}, 
					 { 1.044, 1.005, 0.948, 0.991, 0.997, 1.027, 0.979, 0.996, 1.004, 1.009, 0.999, 0.997, 1.028, 0.996, 0.982, 0.969, 1.013, 1.039}, 
					 { 1.044, 1.005, 0.948, 0.991, 0.997, 1.026, 0.979, 0.996, 1.004, 1.009, 0.999, 0.997, 1.028, 0.996, 0.982, 0.969, 1.013, 1.039}, 
					 { 1.046, 1.007, 0.950, 0.993, 0.999, 1.029, 0.981, 0.998, 1.006, 1.012, 1.001, 0.999, 1.030, 0.998, 0.984, 0.971, 1.015, 1.042}, 
					 { 1.047, 1.007, 0.950, 0.993, 1.000, 1.029, 0.982, 0.999, 1.007, 1.012, 1.002, 0.999, 1.031, 0.999, 0.985, 0.972, 1.016, 1.042}, 
					 { 1.049, 1.009, 0.952, 0.995, 1.002, 1.031, 0.983, 1.000, 1.009, 1.014, 1.003, 1.001, 1.033, 1.001, 0.986, 0.973, 1.018, 1.044}, 
					 { 1.053, 1.013, 0.956, 0.999, 1.006, 1.035, 0.987, 1.004, 1.013, 1.018, 1.007, 1.005, 1.037, 1.004, 0.990, 0.977, 1.022, 1.048}, 
					 { 1.033, 0.994, 0.938, 0.980, 0.987, 1.016, 0.969, 0.986, 0.994, 0.999, 0.989, 0.986, 1.017, 0.986, 0.972, 0.959, 1.003, 1.029}, 
					 { 1.028, 0.990, 0.934, 0.976, 0.982, 1.011, 0.964, 0.981, 0.989, 0.994, 0.984, 0.982, 1.012, 0.981, 0.967, 0.954, 0.998, 1.024}, 
					 { 1.039, 1.000, 0.944, 0.986, 0.993, 1.022, 0.974, 0.991, 1.000, 1.005, 0.994, 0.992, 1.023, 0.992, 0.977, 0.964, 1.009, 1.035}, 
					 { 1.053, 1.013, 0.956, 0.999, 1.005, 1.035, 0.987, 1.004, 1.012, 1.018, 1.007, 1.005, 1.036, 1.004, 0.990, 0.977, 1.021, 1.048}}; 

	return SFmatrix[ET_I][etaI];
    }else if(set==3) {
	const double SFmatrix[15][18] = {{ 1.050, 0.989, 0.934, 0.978, 0.976, 1.014, 0.960, 0.979, 1.009, 1.007, 0.981, 0.983, 1.017, 0.976, 0.980, 0.940, 0.989, 1.040}, 
					 { 1.052, 0.991, 0.936, 0.981, 0.978, 1.017, 0.962, 0.981, 1.012, 1.009, 0.983, 0.985, 1.020, 0.978, 0.982, 0.942, 0.991, 1.042}, 
					 { 1.061, 0.999, 0.944, 0.989, 0.986, 1.025, 0.970, 0.989, 1.020, 1.017, 0.991, 0.993, 1.028, 0.986, 0.990, 0.950, 0.999, 1.051}, 
					 { 1.061, 0.999, 0.944, 0.989, 0.986, 1.025, 0.970, 0.989, 1.020, 1.017, 0.991, 0.993, 1.028, 0.986, 0.990, 0.950, 0.999, 1.051}, 
					 { 1.064, 1.002, 0.946, 0.991, 0.989, 1.028, 0.973, 0.992, 1.023, 1.020, 0.994, 0.996, 1.031, 0.989, 0.993, 0.953, 1.002, 1.054}, 
					 { 1.076, 1.013, 0.957, 1.003, 1.000, 1.040, 0.984, 1.003, 1.035, 1.032, 1.006, 1.008, 1.043, 1.000, 1.004, 0.964, 1.014, 1.066}, 
					 { 1.079, 1.016, 0.960, 1.005, 1.003, 1.042, 0.986, 1.006, 1.037, 1.035, 1.008, 1.010, 1.045, 1.003, 1.007, 0.966, 1.016, 1.068}, 
					 { 1.080, 1.017, 0.961, 1.007, 1.004, 1.044, 0.988, 1.007, 1.039, 1.036, 1.010, 1.012, 1.047, 1.004, 1.008, 0.968, 1.018, 1.070}, 
					 { 1.084, 1.021, 0.964, 1.010, 1.007, 1.047, 0.991, 1.011, 1.042, 1.040, 1.013, 1.015, 1.050, 1.008, 1.011, 0.971, 1.021, 1.074}, 
					 { 1.089, 1.026, 0.969, 1.015, 1.012, 1.052, 0.996, 1.016, 1.047, 1.045, 1.018, 1.020, 1.055, 1.013, 1.016, 0.976, 1.026, 1.079}, 
					 { 1.094, 1.030, 0.973, 1.019, 1.016, 1.057, 1.000, 1.020, 1.051, 1.049, 1.022, 1.024, 1.060, 1.017, 1.020, 0.979, 1.030, 1.083}, 
					 { 1.059, 0.997, 0.942, 0.987, 0.984, 1.023, 0.968, 0.988, 1.018, 1.016, 0.990, 0.992, 1.026, 0.985, 0.988, 0.949, 0.998, 1.049}, 
					 { 1.056, 0.994, 0.939, 0.984, 0.981, 1.020, 0.965, 0.984, 1.015, 1.012, 0.986, 0.988, 1.023, 0.981, 0.985, 0.945, 0.994, 1.045}, 
					 { 1.054, 0.993, 0.938, 0.982, 0.979, 1.018, 0.964, 0.983, 1.013, 1.011, 0.985, 0.987, 1.021, 0.980, 0.984, 0.944, 0.993, 1.044}, 
					 { 1.063, 1.001, 0.946, 0.991, 0.988, 1.027, 0.972, 0.991, 1.022, 1.020, 0.994, 0.995, 1.030, 0.988, 0.992, 0.952, 1.002, 1.053}};  

	return SFmatrix[ET_I][etaI];
    }else

      return 0.;

}

// For trigger SF uncertainties (symmetric)
inline double ele_trigger_SF_err_AFII(double eta, double ET, int set_or_run)
{

    int set = -1;
    if(set_or_run > 100) set = runnumber_to_set(set_or_run);
    else set = set_or_run;
 
    if(set<0 || set>3) {
      std::cout << "electron_MI_SF_R17.h ele_trigger_SF_err(): the trigger needs to be 0, 1 or 2. You gave " << set << ". Returning 1. as trigger error on scale factor." << std::endl;
      return 1.0;
    }

    double ele_eta = eta;
    double ele_ET = ET;
    const double etamax = 2.47;
    const double etacrack[2] = {1.37,1.52};
    const double EtMin = 25.;

    // do range checks first and get out before allocating the arrays ...
    if ( std::fabs(ele_eta) > etamax || (std::fabs(ele_eta) > etacrack[0] && std::fabs(ele_eta) < etacrack[1]) || ele_ET < EtMin) return 1.0;

    const double etabins[18] = {-2.47,-2.37,-2.01,-1.81,-1.37,
							    -1.15,-0.8,-0.6,-0.1,0,0.1,0.6,0.8,1.15,
							    1.52,1.81,2.01,2.37};

    const double ETbins[15] = { 25., 26., 27., 28., 29., 30., 32., 35., 40., 45., 50., 60., 80., 150., 200.}; // lower edges of et bins

    int etaI=-1; int ET_I=-1;
    for (int i=17; i>=0; i--){    // find eta index
        if ( ele_eta > etabins[i] ) {
            etaI = i;
            break;
        }
    }
    for (int i=14; i>=0; i--){    // find ET index
        if ( ele_ET > ETbins[i] ) {
            ET_I = i;
            break;
        }
    }
    if (etaI == -1 || ET_I == -1) return 1.0; // given the range check above this should not happen ...

    if(set==0){
	const double errmatrix[15][18] = {{ 0.019, 0.012, 0.012, 0.013, 0.012, 0.013, 0.012, 0.012, 0.013, 0.013, 0.012, 0.012, 0.013, 0.012, 0.012, 0.012, 0.012, 0.019}, 
					  { 0.019, 0.009, 0.009, 0.009, 0.008, 0.008, 0.008, 0.008, 0.009, 0.009, 0.008, 0.008, 0.008, 0.008, 0.009, 0.009, 0.008, 0.019}, 
					  { 0.019, 0.009, 0.009, 0.010, 0.009, 0.009, 0.009, 0.009, 0.010, 0.010, 0.009, 0.009, 0.009, 0.009, 0.010, 0.009, 0.009, 0.019}, 
					  { 0.019, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.019}, 
					  { 0.019, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.006, 0.007, 0.007, 0.006, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.019}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.019}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.019}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.019}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.019}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.019}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.019}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.005, 0.005, 0.006, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.019}, 
					  { 0.019, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.019}, 
					  { 0.020, 0.011, 0.011, 0.012, 0.011, 0.012, 0.011, 0.011, 0.012, 0.012, 0.011, 0.011, 0.012, 0.011, 0.012, 0.011, 0.011, 0.019}, 
					  { 0.020, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.016, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.020}}; 
	
	return errmatrix[ET_I][etaI];			                                 
    }else if(set==1) {
	const double errmatrix[15][18] = {{ 0.009, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.008, 0.008, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.009}, 
					  { 0.007, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007}, 
					  { 0.008, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.008}, 
					  { 0.007, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					  { 0.007, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.007}, 
					  { 0.008, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.008}, 
					  { 0.010, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.010}}; 
	
	return errmatrix[ET_I][etaI];			                                 

    }else if(set==2) {
	const double errmatrix[15][18] = {{ 0.027, 0.022, 0.021, 0.021, 0.021, 0.022, 0.021, 0.021, 0.022, 0.022, 0.021, 0.021, 0.022, 0.021, 0.021, 0.021, 0.022, 0.026}, 
					  { 0.019, 0.012, 0.012, 0.012, 0.011, 0.011, 0.011, 0.011, 0.012, 0.012, 0.011, 0.011, 0.011, 0.011, 0.012, 0.012, 0.012, 0.019}, 
					  { 0.018, 0.011, 0.011, 0.010, 0.010, 0.010, 0.010, 0.010, 0.011, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010, 0.011, 0.010, 0.018}, 
					  { 0.018, 0.010, 0.010, 0.009, 0.009, 0.009, 0.009, 0.008, 0.009, 0.009, 0.008, 0.009, 0.009, 0.009, 0.009, 0.010, 0.009, 0.017}, 
					  { 0.017, 0.010, 0.010, 0.009, 0.009, 0.009, 0.009, 0.008, 0.009, 0.009, 0.008, 0.009, 0.009, 0.009, 0.009, 0.010, 0.009, 0.017}, 
					  { 0.017, 0.008, 0.009, 0.008, 0.007, 0.007, 0.007, 0.007, 0.008, 0.008, 0.007, 0.007, 0.007, 0.007, 0.008, 0.009, 0.008, 0.017}, 
					  { 0.017, 0.008, 0.008, 0.007, 0.006, 0.006, 0.006, 0.006, 0.007, 0.007, 0.006, 0.006, 0.006, 0.006, 0.007, 0.008, 0.007, 0.016}, 
					  { 0.016, 0.007, 0.008, 0.007, 0.006, 0.006, 0.006, 0.005, 0.007, 0.007, 0.005, 0.006, 0.006, 0.006, 0.007, 0.008, 0.007, 0.016}, 
					  { 0.016, 0.007, 0.008, 0.007, 0.006, 0.006, 0.006, 0.005, 0.007, 0.007, 0.005, 0.006, 0.006, 0.006, 0.007, 0.008, 0.007, 0.016}, 
					  { 0.017, 0.007, 0.008, 0.007, 0.006, 0.006, 0.006, 0.005, 0.007, 0.007, 0.005, 0.006, 0.006, 0.006, 0.007, 0.008, 0.007, 0.016}, 
					  { 0.017, 0.008, 0.009, 0.007, 0.007, 0.007, 0.007, 0.006, 0.008, 0.007, 0.006, 0.007, 0.007, 0.007, 0.008, 0.008, 0.007, 0.016}, 
					  { 0.017, 0.008, 0.009, 0.007, 0.006, 0.006, 0.007, 0.006, 0.007, 0.007, 0.006, 0.006, 0.006, 0.006, 0.007, 0.008, 0.007, 0.016}, 
					  { 0.017, 0.009, 0.009, 0.008, 0.007, 0.008, 0.008, 0.007, 0.008, 0.008, 0.007, 0.008, 0.007, 0.007, 0.008, 0.009, 0.008, 0.017}, 
					  { 0.023, 0.017, 0.017, 0.017, 0.016, 0.017, 0.016, 0.016, 0.017, 0.017, 0.016, 0.016, 0.017, 0.016, 0.017, 0.017, 0.017, 0.023}, 
					  { 0.032, 0.027, 0.026, 0.027, 0.027, 0.028, 0.026, 0.027, 0.027, 0.027, 0.027, 0.027, 0.028, 0.027, 0.027, 0.027, 0.028, 0.032}}; 

 

	return errmatrix[ET_I][etaI];			                                 

    }else if(set==3) {
	const double errmatrix[15][18] = {{ 0.010, 0.009, 0.008, 0.008, 0.008, 0.009, 0.008, 0.008, 0.009, 0.009, 0.008, 0.008, 0.009, 0.008, 0.009, 0.008, 0.008, 0.010}, 
					  { 0.008, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.008}, 
					  { 0.008, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.008}, 
					  { 0.008, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.007}, 
					  { 0.008, 0.006, 0.006, 0.006, 0.005, 0.006, 0.005, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.006, 0.006, 0.007}, 
					  { 0.008, 0.006, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.008, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.008, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.008, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.008, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.008, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.008, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.008, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.007}, 
					  { 0.009, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.008, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.009}, 
					  { 0.010, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.010}};  

	

	return errmatrix[ET_I][etaI];			                                 

    }else
      return 1.0;
}


inline int runnumber_to_set(int run_number) {

  if(run_number >= 200804 && run_number <= 203227)  return 0;
  else if((run_number >= 203228 && run_number <206248) ||(run_number >206954 && run_number <=208178))
    return 1;
  else if(run_number >=206248 && run_number <=206954) return 2;
  else if(run_number >= 208179)  return 3;
  else 
    return -1;
  
}

#endif
